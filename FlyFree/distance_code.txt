from tello import Tello
import time
import av
import cv2
import numpy as np

tello = Tello()

tello.send_command('command')
begin = time.time()

while 1:
    end = time.time()
    diff = end-begin
    if diff > 1.0:
        tello.send_command('streamon')
        break

video = av.open('udp://0.0.0.0:11111','r')
index = 0

######################calculate distance functions#######################

# initialize the known distance from the camera to the object,
# which in this case is 24 inches
KNOWN_DISTANCE = 15.75  #40cm
 
# initialize the known object width, which in this case,
# the piece of paper is 11 inches wide
KNOWN_WIDTH = 11.69
KNOWN_HEIGHT = 8.27
 
def find_marker(image):
    gray_img = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    # 将彩色图转化为灰度图
 
    gray_img = cv2.GaussianBlur(gray_img, (5, 5), 0)
    # 高斯平滑去噪
 
    edged_img = cv2.Canny(gray_img, 35, 125)
    # Canny算子阈值化
    # cv2.imshow("edged_img",edged_img)
 
    img, countours, hierarchy = cv2.findContours(edged_img.copy(), cv2.RETR_LIST,cv2.CHAIN_APPROX_SIMPLE)
    # 注意，findcontours函数会“原地”修改输入的图像。opencv3会返回三个值,分别是img, countours, hierarchy
 
    c = max(countours, key = cv2.contourArea)
    # 提取最大面积矩形对应的点集
 
    rect = cv2.minAreaRect(c)
    # cv2.minAreaRect()函数返回矩形的中心点坐标，长宽，旋转角度[-90,0)，当矩形水平或竖直时均返回-90
 
    return rect
 
 
def distance_to_camera(knownWidth, focalLength, perWidth):
    return (knownWidth * focalLength) / perWidth
 
 
def calculate_focalDistance(img_path):
    first_image = cv2.imread(img_path)
    # cv2.imshow('first image',first_image)
 
    marker = find_marker(first_image)
    # 得到最小外接矩形的中心点坐标，长宽，旋转角度
 
    focalLength = (marker[1][0] * KNOWN_DISTANCE) / KNOWN_WIDTH
    # 获取摄像头的焦距
 
    print('焦距（focalLength ）= ',focalLength)
    # 将计算得到的焦距打印出来
 
    return focalLength
 
 
def calculate_Distance(image,focalLength_value):
    # 加载每一个图像的路径，读取照片，找到A4纸的轮廓
    # 然后计算A4纸到摄像头的距离
 
    marker = find_marker(image)
    distance_inches = distance_to_camera(KNOWN_WIDTH,focalLength_value, marker[1][0])
    # 计算得到目标物体到摄像头的距离，单位为英寸，
    # 注意，英寸与cm之间的单位换算为： 1英寸=2.54cm
 
    box = cv2.boxPoints(marker)
 
    box =np.int0( box)
 
    cv2.drawContours(image, [box], -1, (0, 0, 255), 2)
    # 在原图上绘制出目标物体的轮廓
 
    cv2.putText(image, "%.2fcm" % (distance_inches * 2.54),
            (image.shape[1] - 300, image.shape[0] - 20), cv2.FONT_HERSHEY_SIMPLEX,
            2.0, (0, 0, 255), 3)
 
    cv2.imshow("image", image)
    
    return distance_inches * 2.54
#################################################################


try:
    pre_distance = 20
    focalLength = calculate_focalDistance('E:\\PythonCode\\img_standard.png') #获得摄像头焦距
    for frame in video.decode():
        img = frame.to_nd_array(format = 'bgr24')
        image1 = img
        image2 = img
        #print(img.shape)
        ############divide left and right##############
        left_img = image1[0:720,0:480]
        right_img = image2[0:720,480:960]
        #cv2.imshow("left",left_img)
        #cv2.imshow("right",right_img)
        ###############################################
        
        ############calculate the optical flow value############
        
        
        ########################################################
        
        ############calculate distance############
        distance = calculate_Distance(img,focalLength)
        if distance < 20 and pre_distance >= 20:
            print('turn left\n')
        elif distance >=20 and pre_distance < 20:
            print('go straight\n')
        ##########################################
        
        pre_distance = distance
        
        #cv2.imshow("Test", img)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
except Exception as e:
    print('fate error:{}'.format(e))

tello.send_command('streamoff')
cv2.destroyAllWindows()